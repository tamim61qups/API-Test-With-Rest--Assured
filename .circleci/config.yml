version: 2.1

executors:
  docker-executor:
    docker:
      - image: circleci/openjdk:11-jdk

jobs:
  checkout:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Checking out the repository
          command: echo 'Checking out the repository...'

  build_docker_image:
    executor: docker-executor
    steps:
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true
      - checkout
      - run:
          name: Build Docker Image
          command: |
            echo "Building the Docker image..."
            docker build -t web_test_automation .

  run_tests_in_docker:
    executor: docker-executor
    steps:
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true
      - checkout
      - run:
          name: Run Tests in Docker Container
          command: |
            echo "Running tests inside Docker container..."
            result=$(docker run --rm web_test_automation sh -c "mvn clean test || true")
            echo "Test Results Output:\n${result}"

            # Parse the output to get the test counts
            if [[ $result =~ Tests\ run:\ ([0-9]+),\ Failures:\ ([0-9]+),\ Errors:\ ([0-9]+),\ Skipped:\ ([0-9]+) ]]; then
              total=${BASH_REMATCH[1]}
              failures=${BASH_REMATCH[2]}
              errors=${BASH_REMATCH[3]}
              skipped=${BASH_REMATCH[4]}
              passed=$((total - failures - errors - skipped))

              # Calculate the passing rate
              passingRate=$((passed * 100 / total))

              # Output the results in a readable format
              echo "Passed: ${passed}, Failed: ${failures}, Errors: ${errors}, Skipped: ${skipped}, Total: ${total}"
              echo "Passing Rate: ${passingRate}%"

              # Store the passing rate as an environment variable for later use
              echo "export PASSING_RATE=${passingRate}" >> $BASH_ENV
              source $BASH_ENV

              # Check if passing rate is below 70%
              if [ "$passingRate" -lt 70 ]; then
                echo "Passing rate is below 70%. Sending failure emails..."
                email_content="Test results: Passed: ${passed}, Failed: ${failures}, Errors: ${errors}, Skipped: ${skipped}, Total: ${total}, Passing Rate: ${passingRate}%"
                
                for email in jubearjabberjetu@gmail.com jubear.qups@gmail.com; do
                  echo "$email_content" | mail -s "Build Failed: Passing Rate Below 70%" "$email"
                  if [ $? -eq 0 ]; then
                    echo "Mail sent successfully to $email."
                  else
                    echo "Failed to send mail to $email."
                  fi
                done
              fi

              # Save the summary to a file
              echo "Total: ${total}" > passing_rate.txt
              echo "Passed: ${passed}" >> passing_rate.txt
              echo "Failed: ${failures}" >> passing_rate.txt
              echo "Errors: ${errors}" >> passing_rate.txt
              echo "Skipped: ${skipped}" >> passing_rate.txt
              echo "Passing Rate: ${passingRate}%" >> passing_rate.txt

              # Set the build result based on the pass and fail counts
              if [ "$failures" -gt 0 ] || [ "$errors" -gt 0 ]; then
                echo "UNSTABLE" > result_status.txt
              else
                echo "SUCCESS" > result_status.txt
              fi
            else
              echo "No test result summary found in the output."
            fi
      - store_artifacts:
          path: test-results  # Save test results as artifacts
      - store_artifacts:
          path: passing_rate.txt  # Save passing rate as an artifact
      - store_artifacts:
          path: result_status.txt  # Save build result status as an artifact

workflows:
  version: 2
  build_and_test:
    jobs:
      - checkout
      - build_docker_image:
          requires:
            - checkout
      - run_tests_in_docker:
          requires:
            - build_docker_image